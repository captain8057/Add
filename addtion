/*الوظيفة الأولى توليد مصفوفة بشكل عشوائي وجمع عناصرها عن طريق بحيث
*/يقون الخيط الرئيسي بتوزيع المهام على الخيوط الفرعية وإعادة استلام النتائج من الخبط الفرعي


//استدعاء المكاتب المطلوبة 
#include "stdafx.h"
#include <mpi.h> 
#include <stdio.h> 
#include <stdlib.h> 
#include <time.h>

// تعريف حجم المصفوفة 
#define n 12
// تعريف حجم المصفوفة 
int a2[n];

int main(int argc, char* argv[])
{
	int *a= reinterpret_cast<int*>(malloc(n * sizeof(int)));

	int c;

	srand(time(NULL));

	for (c = 0; c < n; c++) {

		a[c] = rand() % n;

		//printf("%d ", a[c]);

	}
	printf("\n");

	int pid, np, elements_per_process,n_elements_recieved;
	// np هي عدد خطوط العمليات
	// pid رقم الخيط الذي قام بهذه المهمة 
         
         //البدء بالعمل بشكل تفرعي
	MPI_Status status;
	MPI_Init(&argc, &argv);

	// معرفة عدد العمليات و ورقم كل عملية
	MPI_Comm_rank(MPI_COMM_WORLD, &pid);
	MPI_Comm_size(MPI_COMM_WORLD, &np);

	// الخيط الرئيسي 
	if (pid == 0) {
		int index, i;
		elements_per_process = n / np;

		// التحقق اذا تم البدء بأكثر من عملية 
		if (np > 1) {
			//  توزيع المصفوفة على المعالجات الفرعية 
			for (i = 1; i < np - 1; i++) {
				index = i * elements_per_process;
				MPI_Send(&elements_per_process,	1, MPI_INT, i, 0,MPI_COMM_WORLD);
				MPI_Send(&a[index],elements_per_process,MPI_INT, i, 0,MPI_COMM_WORLD);
			}

			// احضار نواتج العمليات الفرعية من قبل الخيط الرئيسي
			index = i * elements_per_process;
			int elements_left = n - index;

			MPI_Send(&elements_left,1, MPI_INT,i, 0,MPI_COMM_WORLD);
			MPI_Send(&a[index],elements_left,MPI_INT, i, 0,MPI_COMM_WORLD);
		}

		// جمع نواتج عمليات الخيوط الفرعية مع الخيط الرئيسي  
		int sum = 0;
		for (i = 0; i < elements_per_process; i++)
			sum += a[i];

		// collects partial sums from other processes 
		int tmp;
		for (i = 1; i < np; i++) {
			MPI_Recv(&tmp, 1, MPI_INT,MPI_ANY_SOURCE, 0,MPI_COMM_WORLD,&status);
			int sender = status.MPI_SOURCE;
			sum += tmp;
		}

		// طباعة مجموع المصفوفة 
		
      	printf("Sum of array is : %d\n", sum);
	}
	// شرح كيفية القيام بالعمليات على الخيوط الفرعية 
	else {
		MPI_Recv(&n_elements_recieved,1, MPI_INT, 0, 0,MPI_COMM_WORLD,&status);

		// تخزين قيم المصفوفة المستلمة من الخيط الرئيسي ووضعها في A2 
		MPI_Recv(&a2, n_elements_recieved,MPI_INT, 0, 0,MPI_COMM_WORLD,&status);

		// حساب المجموع الجزئي
		int partial_sum = 0;
		for (int i = 0; i < n_elements_recieved; i++)
			partial_sum += a2[i];

		// إرسال ناتج عملية الجمع الفرعية إلى الخيط الرئيسي
		MPI_Send(&partial_sum, 1, MPI_INT,0, 0, MPI_COMM_WORLD);
		printf("sum calculated by process runk %d :  %d" ,pid, partial_sum);
	}

	// إيقاف جميع العمليات التفرعية وإغلاق المكتبة 
	MPI_Finalize();

	return 0;
}
